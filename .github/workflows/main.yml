name: DEV youstras workflow

on:
    push:
        branches:
            - dev



jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Test with flake8
        run: python -m flake8 consultplace/

  build_backend_and_push_to_docker_hub:
    name: Build backend image and push to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD_SSH }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./consultplace/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/crm_leo-backend:latest


  build_bot_and_push_to_docker_hub:
    name: Build bot image and push to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD_SSH }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./bot/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/crm_leo-bot:latest


  build_nginx_and_push_to_docker_hub:
    name: Build nginx image and push to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD_SSH }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/crm_leo-nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_bot_and_push_to_docker_hub
      - build_nginx_and_push_to_docker_hub

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "/home/ubuntu/CRM_leo_test/"

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/ubuntu/CRM_leo_test/
            # rm -f .env
            # touch .env
            # echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            # echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            # echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            # echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            # echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            # echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            # echo DB_PORT=${{ secrets.DB_PORT }} >> .env


            sudo docker compose -f docker-compose.production.yml down
            sudo docker image prune -a -f
            sudo docker compose -f docker-compose.production.yml up -d
